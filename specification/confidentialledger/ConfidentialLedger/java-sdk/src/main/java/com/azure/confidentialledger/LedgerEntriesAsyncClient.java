// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.confidentialledger;

import com.azure.confidentialledger.implementation.LedgerEntriesImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureConfidentialLedgerClient type. */
@ServiceClient(builder = LedgerEntriesClientBuilder.class, isAsync = true)
public final class LedgerEntriesAsyncClient {
    @Generated private final LedgerEntriesImpl serviceClient;

    /**
     * Initializes an instance of LedgerEntriesAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    LedgerEntriesAsyncClient(LedgerEntriesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets ledger entries from a collection corresponding to a range.
     *
     * <p>A collection id may optionally be specified. Only entries in the specified (or default) collection will be
     * returned.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String (Required)
     *     collectionId: String (Optional)
     *     transactionId: String (Required)
     * }
     * }</pre>
     *
     * @param collectionId The collection id.
     * @param fromTransactionId Specify the first transaction ID in a range.
     * @param toTransactionId Specify the last transaction ID in a range.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paginated ledger entries returned in response to a query as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listLedgerEntries(
            String collectionId, String fromTransactionId, String toTransactionId, RequestOptions requestOptions) {
        return this.serviceClient.listLedgerEntriesAsync(
                collectionId, fromTransactionId, toTransactionId, requestOptions);
    }

    /**
     * Writes a ledger entry.
     *
     * <p>A collection id may optionally be specified.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String (Required)
     * }
     * }</pre>
     *
     * @param collectionId The collection id.
     * @param updateableProperties The template for adding updateable properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createLedgerEntryWithResponse(
            String collectionId, BinaryData updateableProperties, RequestOptions requestOptions) {
        return this.serviceClient.createLedgerEntryWithResponseAsync(
                collectionId, updateableProperties, requestOptions);
    }

    /**
     * Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate
     * the collection from which to fetch the value.
     *
     * <p>To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To
     * prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the
     * response, or if the loading is still ongoing.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Loading/Ready) (Required)
     *     entry (Optional): {
     *         contents: String (Required)
     *         collectionId: String (Optional)
     *         transactionId: String (Required)
     *     }
     * }
     * }</pre>
     *
     * @param transactionId The transactionId parameter.
     * @param collectionId The collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of querying for a ledger entry from an older transaction id along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLedgerEntryWithResponse(
            String transactionId, String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getLedgerEntryWithResponseAsync(transactionId, collectionId, requestOptions);
    }

    /**
     * Gets the current value available in the ledger.
     *
     * <p>A collection id may optionally be specified.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     contents: String (Required)
     *     collectionId: String (Optional)
     *     transactionId: String (Required)
     * }
     * }</pre>
     *
     * @param collectionId The collection id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an entry in the ledger along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getCurrentLedgerEntryWithResponse(
            String collectionId, RequestOptions requestOptions) {
        return this.serviceClient.getCurrentLedgerEntryWithResponseAsync(collectionId, requestOptions);
    }

    /**
     * Gets a receipt certifying ledger contents at a particular transaction id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     receipt (Optional): {
     *         cert: String (Optional)
     *         leaf: String (Optional)
     *         leafComponents (Optional): {
     *             claimsDigest: String (Optional)
     *             commitEvidence: String (Optional)
     *             writeSetDigest: String (Optional)
     *         }
     *         nodeId: String (Required)
     *         proof (Required): [
     *              (Required){
     *                 left: String (Optional)
     *                 right: String (Optional)
     *             }
     *         ]
     *         root: String (Optional)
     *         serviceEndorsements (Optional): [
     *             String (Optional)
     *         ]
     *         signature: String (Required)
     *     }
     *     state: String(Loading/Ready) (Required)
     *     transactionId: String (Required)
     * }
     * }</pre>
     *
     * @param transactionId A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it
     *     indicates the state from which the entry was read.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a receipt certifying ledger contents at a particular transaction id along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getReceiptWithResponse(String transactionId, RequestOptions requestOptions) {
        return this.serviceClient.getReceiptWithResponseAsync(transactionId, requestOptions);
    }

    /**
     * Gets the status of an entry identified by a transaction id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     state: String(Committed/Pending) (Required)
     *     transactionId: String (Required)
     * }
     * }</pre>
     *
     * @param transactionId A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it
     *     indicates the state from which the entry was read.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the status of an entry identified by a transaction id along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTransactionStatusWithResponse(
            String transactionId, RequestOptions requestOptions) {
        return this.serviceClient.getTransactionStatusWithResponseAsync(transactionId, requestOptions);
    }
}

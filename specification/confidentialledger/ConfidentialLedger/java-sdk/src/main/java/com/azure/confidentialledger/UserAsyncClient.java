// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.confidentialledger;

import com.azure.confidentialledger.implementation.UsersImpl;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AzureConfidentialLedgerClient type. */
@ServiceClient(builder = UserClientBuilder.class, isAsync = true)
public final class UserAsyncClient {
    @Generated private final UsersImpl serviceClient;

    /**
     * Initializes an instance of UserAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    UserAsyncClient(UsersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Deletes a user from the Confidential Ledger.
     *
     * @param userId Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteUserWithResponse(String userId, RequestOptions requestOptions) {
        return this.serviceClient.deleteUserWithResponseAsync(userId, requestOptions);
    }

    /**
     * Gets a user.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader) (Required)
     *     userId: String (Required)
     * }
     * }</pre>
     *
     * @param userId Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a user along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getUserWithResponse(String userId, RequestOptions requestOptions) {
        return this.serviceClient.getUserWithResponseAsync(userId, requestOptions);
    }

    /**
     * Adds a user or updates a user's fields.
     *
     * <p>A JSON merge patch is applied for existing users.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader) (Required)
     *     userId: String (Required)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     assignedRole: String(Administrator/Contributor/Reader) (Required)
     *     userId: String (Required)
     * }
     * }</pre>
     *
     * @param userId Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
     * @param ledgerUser Details about a Confidential Ledger user.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details about a Confidential Ledger user along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createOrUpdateUserWithResponse(
            String userId, BinaryData ledgerUser, RequestOptions requestOptions) {
        return this.serviceClient.createOrUpdateUserWithResponseAsync(userId, ledgerUser, requestOptions);
    }
}
